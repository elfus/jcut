C programming language features
1. Functions that receive the following data types by value:
	char, short, int, long, float, double [include unsigned versions too]
2. Global variables of primitive types
3. Functions that receive structures by value

4. Functions that receive pointers to primitive data types
5. Global variables of pointers to primitive data types.
6. Functions that receive structures by pointers
7. Functions that take pointers to functions
8. Global variables that are pointers to functions


The tests bed will be divided according the features supported by the tool into
logical groups named with letters starting with A...until Z.

Group A - Basic functions only:
	  Create a C file with functions receiving data types by value for all
	  primitive data types.

	  Tests:
		1. Run some simple tests on them in the default group.
		2. Expected results from functions

	  Features tested:
	  	Basic function calling
		Comparison operators for expected results

Group B - Basic global variables only:
	  Create a C file with global variables of differenty primitive data types.

	  Create tests that:
	  		 1. Modify the global variables using before and after statements
			 2. Call functions in before/after statements
			 3. Same as 1 but including group A
			 4. Check expected results in after statement

	  Features tested:
	     before statement
		 after statement

Group C - before_all/after_all
	  Tests:
		1. Create global states and combine with Group B.3
		2. Check global post conditions

Group D - mockup and mockup_all:
	  Tests:
		1. Create basic function mockups
		2. Create basic variable mockups
		3. Combine 1 and 2
		4. Combine 1, 2, and 3 with test groups A and B.
		5. Same as previous but wiht mockup_all
	  Features to be tests:
	     mockup statement

Group E - Pointers type:
	  Tests:
		1. Create functions that take pointers type to single element
		2. Create functions that take pointers to arrays
		3. Initialization of memory allocated
		4. Pointers to functions
		5. Pointers to pointers.
		6. Check values for output arguments in after statement
		7. Create global variables that are pointers
		8. Create global variables that are pointers to pointers
		9. Create global variables that are pointers to functions.

Group F - Structures:
	  Tests:
		1. Structures passed by value
		2. Structures returned by value
		3. Structures passed by pointers
		4. Structures returned by functions
		5. Structures initialization

Group G - Groups:
	  Tests:
		1. Pick tests from previous groups and create several test groups in a file
